apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.microservice.name }}
  namespace: {{ .Values.microservice.namespace }}
spec:
  serviceName: {{ .Values.microservice.name }}
  replicas: {{ .Values.microservice.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.microservice.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.microservice.namespace }}
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: {{ .Values.microservice.name }}
    spec:
      containers:
        - name: {{ .Values.microservice.name }}
          image: {{ .Values.workload.image }}
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: {{ .Values.workload.containerPort }}
          envFrom:
            - configMapRef:
                name: {{ .Values.microservice.name }}-configmap
            - secretRef:
                name: {{ .Values.microservice.name }}-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: {{ .Values.microservice.name }}-persistent-storage
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.microservice.name }}-persistent-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.workload.storageCapacity }}
#      volumes:
#        - name: postgresdb
#          persistentVolumeClaim:
#            claimName: postgres-pv-claim