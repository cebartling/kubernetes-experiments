apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservice.name }}
  namespace: {{ .Values.microservice.namespace }}
spec:
  replicas: {{ .Values.microservice.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.microservice.name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.microservice.namespace }}
        app.kubernetes.io/component: api-server
        app.kubernetes.io/instance: {{ .Values.microservice.name }}
    spec:
      containers:
        - name: {{ .Values.microservice.name }}
          image: {{ .Values.workload.image }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health/livenessCheck
              port: {{ .Values.workload.port }}
            initialDelaySeconds: {{ .Values.workload.livenessDelay }}
            periodSeconds: {{ .Values.workload.livenessPeriod }}
          readinessProbe:
            httpGet:
              path: /health/readinessCheck
              port: {{ .Values.workload.port }}
            initialDelaySeconds: {{ .Values.workload.readinessDelay }}
            periodSeconds: {{ .Values.workload.readinessPeriod }}
          resources:
            requests:
              memory: {{ .Values.workload.resources.memory }}
              cpu: {{ .Values.workload.resources.cpu }}
            limits:
              memory: {{ .Values.workload.resources.memory }}
          ports:
            - containerPort: {{ .Values.workload.port }}
              name: http
              protocol: TCP
      restartPolicy: Always
